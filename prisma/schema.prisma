// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    // User basic properties
    id                      String    @id @default(cuid())
    firstname               String?
    lastname                String?
    email                   String?   @unique
    image                   String?

    // Account & Session
    emailVerified           DateTime?
    accounts                Account[]
    sessions                Session[]

    // Schooliu properties
    reputation              Int
    badges                  Badge[]
    commentspublished       Comment[] @relation("commented")
    commentsLiked           Comment[] @relation("liked")
    commentsDisliked        Comment[] @relation("disliked")
    quizLiked               Quiz[]
    group                   Group  @relation(fields: [groupId], references: [id])
    groupId                 Int
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Badge {
    id         Int   @id @default(autoincrement())
    name       String?
    image      String?
    users       User[]
}

model Comment {
    id              Int         @id @default(autoincrement())
    publisher       User        @relation(name: "commented", fields: [publisherID], references: [id])
    publisherID     String
    title           String
    description     String
    tag             CommentTag
    course          Course      @relation(fields: [courseID], references: [id])
    courseID        Int
    approvedBy      User[]      @relation("liked")
    disapprovedBy   User[]      @relation("disliked")
    closed          Boolean
}

model Course {
    id              Int   @id @default(autoincrement())
    slug            String  @unique
    title           String
    image           String
    quiz            Quiz[]
    comments        Comment[]
    chapters        Chapter[]
    group           Group @relation(fields: [groupID], references: [id])
    groupID         Int
}

model Chapter {
    id              Int     @id @default(autoincrement())
    slug            String  @unique
    name            String
    content         String
    course          Course  @relation(fields: [courseID], references: [id])
    courseID        Int
}

model Quiz{
    id              Int   @id @default(autoincrement())
    slug            String  @unique
    questions       Question[]
    likedBy         User[]
    course          Course  @relation(fields: [courseID], references: [id])
    courseID        Int
}

model Question{
    id                  Int   @id @default(autoincrement())
    title               String
    image               String?
    type                QuestionType
    quiz                Quiz  @relation(fields: [quizID], references: [id])
    quizID              Int

    mCQ                 MCQ?
    numberAnswer        NumberAnswer?
    textAnswer          TextAnswer?
}

model MCQ{
    id                  Int   @id @default(autoincrement())
    listchoice          String[]
    answers             Boolean[]
    question            Question    @relation(fields: [questionID], references: [id])
    questionID          Int         @unique
}

model NumberAnswer{
    id                  Int   @id @default(autoincrement())
    maxanswer           Float
    minanswer           Float
    question            Question    @relation(fields: [questionID], references: [id])
    questionID          Int         @unique
}

model TextAnswer{
    id                  Int   @id @default(autoincrement())
    answers             String[]
    question            Question    @relation(fields: [questionID], references: [id])
    questionID          Int         @unique
}

enum QuestionType{
    OneAnswerMCQ
    MultiAnswerMCQ
    NumberAnswer
    TextAnswer
}

enum CommentTag{
    Question
    ErrorFound
    Imprecision
    Suggestion
}

model Group{
    id              Int   @id @default(autoincrement())
    slug            String  @unique
    courses         Course[]
    parentGroup     Group? @relation(name: "parent", fields: [parentGroupID], references: [id])
    parentGroupID   Int?
    subgroups       Group[] @relation("parent")
    university      University @relation(fields: [universityID], references: [id])
    universityID    Int
    firstLayerGroup Boolean @default(false)
    users           User[]
}

model University{
    id              Int   @id @default(autoincrement())
    slug            String  @unique
    name            String
    image           String
    groups          Group[]
}